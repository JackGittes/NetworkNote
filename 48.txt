计算机网络原理笔记 48
Internet应用（一）
作者：赵明心    日期：2019/04/26

8.0 Internet应用
    主要内容：
        1、应用层的基本工作原理
        2、常用的网络应用模式
        3、域名服务DNS
        4、电子邮件传输协议：SMTP，POP3等
        5、WWW及其主要技术
        6、远程文件传输协议FTP

8.1 应用层概述
    1、应用程序：具有通信功能的分布式进程
        （1）用户访问网络的接口
        （2）例如：email, file transfer, the Web
    2、应用层协议：
        （1）应用程序的一部分
        （2）定义信息格式
        （3）定义通信规则
        （4）访问下层提供的服务

           主机A                             主机B
        FTP客户进程                       FTP客户进程
          FTP协议                           FTP协议
          TCP协议                           TCP协议
            |                                 |
            |                                 |
          物理层                             物理层
                          网络
    3、应用层协议

        应用层   文件传输：FTP\TFTP\NFS
                电子邮件：SMTP\POP3
                WWW应用：HTTP
                远程登录：Telnet\rlogin
                网络管理：SNMP
                名字管理：DNS
        传输层

        网络层

        网络接口层

    4、应用层及其采用的下层协议
        应用层协议             网络应用             采用的传输层协议
        SMTP                  电子邮件                   TCP
        FTP                  远程文件传输                TCP
        Telnet                 虚终端                    TCP
        HTTP                   Web服务                   TCP
        DNS                   域名解析                  TCP或UDP
        SNMP                  网络管理                   UDP
        RTP                  流媒体传输                 TCP或UDP

    文件传输下层一般都是TCP，需要可靠性保障，流媒体传输用户对时效性要求高，一般用UDP，但是有一些有可靠性要求的也会使用TCP。

8.2 常用网络应用模式
    1、客户/服务器模型
        客户方主动地发起通信请求，服务器方被动地等待通信的建立

        客户1          客户2         客户3                     服务器1   服务器2
        文件客户       Web客户       Web客户                   Web服务   文件服务
        请求|响应     请求|响应      请求|响应                    
        ------------------------------------------互联网-----------------------
    应用层协议都建立在一个客户端和服务器端模型上。

        （1）、客户端
            （1）一般运行于用户的个人计算机上
            （2）向服务器主动发起通信请求
            （3）可以访问多个服务器，但一次只能访问一个
            （4）不需要特殊的硬件和复杂的操作系统

        （2）、服务器端
            （1）是专用的提供某种服务的特权程序，可以同时处理多个远程客户
            （2）一般在系统启动时被执行，并连续运行处理多次会话
            （3）被动的等待远程客户发起通信
            （4）需要特殊的硬件和复杂的操作系统

        （3）、重复型和并发型服务程序

            等待客户请求<----             -------->等待客户请求      
                |          |             |            |            服务器1
            处理客户请求    |             |            |           
                |          |             |        启动一个新的    处理客户请求
            发送响应给发送  |             |          服务器            |
            请求的客户      |             |           |             发送响应
                |----------|             |-----------|            给发送请求的
                                                                    客户
               （a）重复型服务程序                   （b）并发型服务程序

            （1）重复型服务器在处理一个请求时其他请求必须等待
            （2）并发型利用生成其他服务器的方法可同时处理多个请求

    2、浏览器/服务器模型
        （1）、B/S模式下客户通过WWW浏览器实现对服务器的访问
        （2）、一部分事务逻辑在前端实现，但是主要事务逻辑在服务器端实现，形成所谓的三层 （3-tier）结构

        用户（浏览器）---Internet----WWW应用服务器---数据库访问网关---数据库服务器
    
    3、P2P模型
        （1）点对点（P2P）模型特点是网络中的任何节点都可以作为服务器或者客户端
        （2）P2P模型优势在于降低了对服务器的依赖以及它的分布式的控制能力
    
     这是近些年来的热点，最大特点是无论是客户服务器还是浏览器服务器，都有集中式的缺点，C/S和B/S都是集中式的，服务器负担重。每一个连入网络的节点都可以进行处理请求。

     3.1 目录式结构
        一台或多台中心服务器为对等点提供目录服务。对等点向目录服务注册自身信息（如名称、地址、资源和元数据等），通过目录服务器进行信息查询，定位其他对等点等。

        P----S----S----P
             |    |
        P----S----S----P    P：对等节点   S：中心服务器
     
     目录式结构还是带有集中式的痕迹。

     3.2 纯P2P结构
        每个节点既可以作为服务器也可以作为客户端，实际上每个节点都需要让其他节点知道自己能够提供什么样的服务。

        取消了中心服务器，每个用户随机接入网络，对等节点的内容查询和内容共享都是直接通过相邻节点的广播来实现的。
    
    3.3 两种P2P结构的比较
        1、目录式P2P结构有利于网络资源的快速检索，但是其集中式的特点容易遭到攻击
        2、纯P2P结构解决了抗攻击的问题，但是又缺乏快速搜索和可扩展性
        3、因此提出了混合式P2P结构

    3.4 混合P2P结构
        P2P搜索引擎 —— 第三代google搜索技术
        P：对等节点

         超级节点 --------Internet----------超级节点
          |   |                             |    |
          P   P                             P    P
        Google搜索引擎为了提高查询效率，分散信息到其他节点上，每个节点都充当了一个服务器提供信息。

        由超级节点负责响应用户对等节点的请求。

8.4 Socket编程
    Socket是从UNIX的I/O命令集发展而来的。Socket为上层实体提供一种透明的访问网络的能力，本质上说是传输层的服务原语。

    用户进程          用户进程             用户进程            用户进程    应用层
       |                |                   |                  |
    ----------------------------------------------------------------
    |                        Socket抽象层                           |
    ----------------------------------------------------------------
        |               |          |            |
        |    ---------------------------------------------
        |    |         TCP         |           UDP       |             运输层
        |    ---------------------------------------------
        |                          |
        |                          |
       ICMP---------------------- IP                                   网络层
                                   |
                                硬件接口
    
    很多时候浏览器、客户、服务器都是借助套接字来实现的。其英文本意是插座，也即为各种应用提供一个统一的接口。由于后来TCP/IP集成到了UNIX内核中，所以后来的TCP/IP可以直接借助套接字编程。

8.4.1   TCP中的套接字系统调用
     Server                       Client

    socket()                     socket()
       |                            |
     bind()                       bind()
       |                            |
    listen()                        |      
       |                            |
    accept() <----------------> connect()
       |                            |
     read()<---- <-------------- write()<----
       |       |                    |       |
    write()----- --------------> read()------
       |                            |
    close()                      close()

    以上是一个典型的C/S模式下的Socket通信，服务器端首先进行socket()初始化告知对方自己被动等待请求，客户端bind()用以建立连接，这时服务器端会进行准备，linsten()进入监听状态，等待请求。而connect()开始建立请求，之后接受accept()请求，接下来进行的就是一个读写过程。例如FTP协议就很典型，上传文件就是客户端向服务器端写入文件，下载文件就是从服务器端read()。这个过程就是一个面向连接的socket编程。

8.5 域名服务
    1、产生原因
        （1）32比特的IP地址难于记忆
        （2）当网络规模比较小时，每台主机只需要查找一个列出了主机与IP地址的对应关系的文件
        （3）当网络规模很大时，产生了域名系统DNS（Domain Name System）
    2、域名的结构
        （1）域名系统是一个多层次的命名系统
        （2）域名的结构由若干个分量组成，各分量之间用点隔开：
            ...三级域名.二级域名.顶级域名
        （3）各分量分别代表不同级别的域名
    3、域名空间
        顶级域名：coop\info\com\net\org\edu\gov\mil\int\uk\cn....
        二级域名：cctv\ibm\hp\mot\...
        三级域名：mail\tsinghua\pku\fudan\...
        四级域名：mail\csnetl\ep...
        
        域名解析是一个自底向上的过程，先解析底下的未能匹配再解析上层的，直到能够匹配为止。
    4、域名服务器
        区域划分
            （1）域名空间被划分成许多无重叠的区域（zone），每个设有域名服务器管理本区域域名
            （2）每个区域有一个主域名服务器和若干个备份域名服务器，比如：edu.cn/xjtu.edu.cn/cs.xjtu.edu.cn是三个不同的区域，分别有各自的域名服务器。
    5、DNS解析
        （1）域名系统是一个典型的客户/服务器系统
        （2）当本地域名服务器不能解析时，就向根域名服务器查询
        （3）根域名服务器：
            a、如果域名映射未知，则向授权域名服务器查询
            b、取得映射
            c、将映射返回本地域名服务器
        新查询到一个映射会在本地域名服务器新增一条记录。
    
        有时候根域名服务器可能不知道授权域名服务器地址，这个时候会联系中间域名服务器，又中间域名服务器来查找根域名服务器。
    
    6、DNS查询：迭代查询
        1、递归查询：
            对根域名服务器造成工作负担
        2、迭代查询：
            （1）被查询的服务器直接把可查询的服务器地址返回
            （2）“不懂这个域名，但可以从这个服务器查到”
    

