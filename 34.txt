计算机网络原理笔记
广域网技术（二）
作者：赵明心    日期：2019/04/05

输出数据的副本数来看，单路路由算法的副本数少，资源消耗少，全路路由算法的副本数多。在数据接收之后，全路路由算法不需要查表，直接对所有输出口进行广播，也无需构建路由表，全路路由算法的好处就是基本不需要控制功能，仅仅是转发功能，仅仅是完成了数据的转移。

多路路由算法，介于两者之间，选择性洪泛，不能保证转发的数据副本是唯一的，同样的目标端也无法保证不会收到重复数据，但是没有全路路由会收到那么多重复数据。但是多路路由也需要往合适的输出口输出。

现实中，单路路由算法使用的比较多，通过查表来实现唯一转发。与数据链路层类似，需要针对特性网络地址进行转发，但是这个时候的路由表不能太详细，一般都是面向一个网络，如果是面向一个主机，路由器难以承担那么大量的数据表格。

    2、按健壮性和简单性划分
    （1）非自适应算法（静态路由算法）：不能根据网络流量和拓扑结构的变化更新路由表，使用静态路由表。
        a、特点：简单、开销小，灵活性差
        b、典型算法：基于流量的路由算法
    （2）自适应算法（动态路由算法）：可根据网络流量和拓扑结构的变化更新路由表
        a、特点：开销大，健壮性和灵活性好
        b、典型算法：距离向量路由算法，链路状态路由算法
    
    静态路由表不等同于固定路由表，静态路由表可以变化，但是不是路由协议或者路由算法自动变化，而是人为更改，静态路由表可以预先人为设定，网络管理人员根据网络的连接情况设定路由表。

    简单地动态路由表是根据流量情况设置的路由，根据网络流量分布设置合适的路径分配。

    静态路由直接反映了网管人员的主观意愿，网管人员希望那样进行传输。而动态路由表选择的路径不一定符合管理人员的需要，在动态路由中也可以人为增加一些静态路由。例如向一个地点发送的时候，同时存在一个静态的路由和一个动态的路由，那么在转发的时候应该先选择静态路由，因为人为控制的优先级更高。

    注意这里的变化分为两类，一类是拓扑的变化，一类是流量的变化，网络拓扑变化例如路由器节点之间有些节点停电了，造成网络路由发生了变化。不管什么原因，节点和节点之间的连线并不是一成不变的。

    距离矢量算法和链路状态路由算法都是考虑了拓扑变化的算法，但是没有考虑流量的变化。网络承载的数据量是不稳定的。

6.2.2   自适应路由算法的工作过程
    1、测量（获取）有关路由选择的网络度量参数
        如何测量？选取哪些网络参数？
    2、将路由信息传送至适当的网络节点
        传送给谁？如何传送？传送什么信息？
    3、计算和更新路由表
        更新路由表算法
    4、根据新路由表执行分组的转发

6.2.3   路由算法设计最优化原则
    1、最优化原则（optimality principle）
        如果路由器J在路由器I到K的最优路由上，那么从J到K的最优路由一定落在同一路由上
    2、汇集树（sink tree）
        （1）从所有的源节点到一个给定的目的节点的最优路由集合形成了一个以目的节点为根的树，称为汇集树
        （2）路由算法的目的是找出并使用汇集树

6.2.4   最短路径路由
    1、基本思想
    构建子网的拓扑图，图中的每个节点代表一个路由器，每条弧代表一条通信线路，为了选择两个路由器之间的路由，算法需要在图中找出节点间的最短路径

    2、网络度量参数
    （1）节点数量
    （2）地理距离
    （3）传输延迟
    （4）距离、信道带宽等参数的加权函数

    确定了节点以及所有节点之间的权重之后选择最短路径是很简单的，使用Dijistra算法可以获得最短路径。

6.2.5   分层路由
    1、网络规模增长带来的问题
        （1）路由器中的路由表增大
        （2）路由器为选择路由而占用的内存，CPU时间和网络带宽增大
    2、分层路由
        （1）分而治之的思想
        （2）根据需要，将路由器分成区域（regions）、聚类（clusters）、区（zones）和组（groups）
    
    3、分层路由带来的问题
        路由表中的路由不一定是最优路由

    分层路由和我们所说的网络分层模型两者之间没有关联，分层路由是为什么产生的呢？之前所讲到的构建网络拓扑图找出最短路径的方式，对于小规模网络来说是可行的，一个网络之中有N个节点，一个路由器当中应该有N-1个表项，自身节点除外，所有其他节点都需要一条路径关系。那么N个节点的网络取决于N的大小，如果N的规模很大的话，意味着路由器中的路由表项越来越多，这种路由选择的算法意味着所有节点是地位等同的，平坦网络。

    随着路由表的增大，带来的实质性问题是，使用的时候，表项数量很大，在查表的时候接受特定的路由分组，在路由表项中查找，确定合适的输出路由，这个查找过程的耗时就很长。在数据库查询的时候，我们可以知道数据库查询的时候，从功能上将从数据库中查询一个记录，是很简单的，一个SQL语句就可以完成，但是如果增加了性能要求的话难度就增大了。在实验环境下，还是可以达到要求的，但是在实际的使用环境来说，表项中只有少量记录项肯定可以满足时间要求，当表项达到数万或百万级别的时候，查询时间就很长了。

    路由器在转发业务数据分组的时候吞吐量会受到很大的影响。同时在适应拓扑变化上，一个大规模网络和小规模网络相对比，大规模网络的变化频率更大，小型网络的变化频率小，每个节点的失效概率固定的情况下，大规模网络只要其中一个节点故障，整个网络拓扑就发生了变化，这样就比小规模网络变化的快很多。拓扑结构一旦变化，路由表马上就需要进行刷新，刷新的频率过快的话，每次都需要向邻居节点传递路由信息，大规模的情况下，这个信息量也会大很多。

    综上，在网络规模增大的情况下，路由选择的内存、CPU和网络带宽占用会急剧增大。平坦式网络的规模不能太大，这样可以进行分层，最终的平坦式网络规模就不会太大。

    简单地来说，就是分成若干级。平坦结构网络就是一级的网络，也就是没有分级。

    此处略去一张图，比较未分层的路由表和分层路由表的差异。分层路由表把下一个等级进行平坦化，这样查询出口线路的时候，只需要查找在当前层级下面对应的出口就可以，送达目标分组之后，再向分组内部的节点进行转发，减少了路由表的规模。

    分层路由也是优缺点的，缺点是，每个个体的到达路径并不一定是最优的，例如1A到5C的过程。