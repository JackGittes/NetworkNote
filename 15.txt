计算机网络原理笔记 15
数据链路控制（二）
作者：赵明心    日期：2019/02/23

正向应答，差错控制和流量控制都需要应答机制。
数据链路层环境，数据不会消失，只有地址错误被丢弃。

接收方保存期望序号的机制，当遇到后续帧且缓冲区足够的情况下，需要存下后续帧。真正数据的传输应该有以下的形式：

    发送方
   |    |
   |--->|
   |--->|
   |--->|
   |    |

    发送方的数据中有序号字段，应答信号中有应答序号ACK，序号该怎么编？根据协议控制信息长度越短越好，格式固定的要求，假定发送方发送1000帧，那么至少需要10位序号，如果是10000帧，则需要更多位数，由于无法预计发送方实际要发送多少帧，我们无法预计需要多少位序号。实际应用中，设计的是循环序号，例如序号空间是n，那么记录范围是0~2^n-1，循环序号有要求，一个序号再次使用的时候原来的序号已经被处理完了，两个相同的序号不能同时存在。

    设计循环序号的时候就要考虑，发送信号的时候的时间范围，在发送时间范围内能发送多少个帧。这时思考一下接收到重复帧，如何判断后续和重复？后续帧存储有可能发生死锁，共享资源竞争使用分配不当就会发生死锁。例如接收方有四个缓冲区，2\3\4\5序号到达，并且是1的后续帧，这时能不能把2~5存下来呢？不能，因为一旦存下了4个，就无法存储1号，而按照顺序提交的要求，没有1号，2345无法提交，这时就发生了死锁。

    再思考，三种应答方式，为什么不能选择负向或者双向？邮件系统，当发送邮件不能完成分发的时候，例如对方邮箱已满、服务器错误未能发送，这时候是典型的负向应答。在负向应答的情况下，计时器超时且无法收到应答的时候，数据到达接收方正确接受的时候，认为数据正确到达。在出错的情况下，发送方会收到应答信号。

    在链路层不适用负向应答的原因是，第一是协议缺陷，负向应答是发送方超时认为数据正确到达，但实际上有可能是数据丢失或应答帧丢失，最终都会导致发送方超时并认为正确送达。第二个原因是正确到达是主要的，负向应答的话，协议效率会大大降低，因为出错和丢失是小概率的，超时计时器需要定的更长，这样会导致发送效率降低。但在应用层或其他层次会有负向应答。

    那么能不能使用双向应答呢？双向应答也不会使用，双向应答也不可以省略超时重发机制，因为要考虑丢失的情况，这时候还需要增加一个字段，用来指明该应答是正向应答还是负向应答。

    从协议设计的简单角度来讲，正向应答是使用的最多的方式。正向应答机制对于后面的差错控制的理解是很有意义的。

4.3 成帧（Framing）
    成帧也即帧同步的问题。物理层或数据链路层将二进制位流识别成为帧的问题。
    1、将比特流分成离散的帧，并计算每个帧的校验和。
    2、成帧方法：
    （1）字符计数法
        -- 在帧头中用一个域来表示整个帧的字符个数
        -- 缺点：若计数出错，对本帧和后面的帧有影响，因此很少采用
    计算机网络在发展历史中，经历了两大类协议，一类是面向字符的，一类是面向比特的。早期都是面向字符的，但是IBM公司发现，在不同的计算机之间通信的时候存在问题，因为字符串信息要求参与通信的计算机都使用相同的字符集，所以现在的主流是面向比特的，面向字符的仍然存在，不过要求都使用ASCII字符集。

    前两种成帧方法是面向字符的，后两种是面向比特的。

    帧开始第一个字符是计数字符，记录了帧的总长度，开始5表示帧计数需要达到5才是1个帧。接收方接收到帧的时候，取第一个字符放到计数器，往下接收每个字符的时候计数器减1，直到计数器归零。这种方法增加的额外信息少，线路利用率高，而且从接收方来讲，接收机制简单，只需要一个计数器就可以完成工作。

    但是字符计数的缺点也很明显，每个帧的划分都依赖于前一个帧。在实际网络中，例如数据链路层，不能只使用字符定界方法。一个是定界字符出错，一个帧出错，后续全错。第二个是，计算机网络传输的时候帧与帧之间是有间隙的，无法预计间隙的长短。数据链路层会用到字符计数法，但不会单独使用。

    在以太网的帧当中，先发送8B的前导码，前7B作为位同步，最后一个B是起始定界，并且以太网的帧当中还有一个长度字段，长度字段的本质就是计数字符。通过字符计数和其他方法的联合，实现定界。

    在更高的层次，例如网络层、传输层，都会使用字符计数法，分组定界、报文定界等，并且单独使用。例如IP协议，有一个字段说明IP总长度，也即一个技术字符。传输层的TCP和UDP协议都有一个字段说明总长度。为什么在高层单独使用字符计数法，而在链路层不能单独使用？因为字符定界的最大问题就是前后帧的依赖性，而在网络层和传输层使用的时候，定界的基础不同，链路层需要在二进制位串中进行划分，从网络层开始就不需要做这些操作了，网络层只需要验证数据边界是否和发送方一致。在后续讲解的时候会更清楚的看到字符计数法的作用。

    （2）带字符填充的首尾字符定界法
    -- 用DLE STX标示帧的开始
    -- 用DLE ETX标示帧的结束
    -- 用DLE DLE标示传送数据信息中的DLE
    -- 例如：信息DLE STX A DLE B DLE ETX在网络中传送时表示为：DLE STX DLE DLE STX A DLE B DLE DLE ETX DLE ETX

    -- 缺点：局限于8位字符和ASCII字符传送，也不被普遍使用。

    这是一种每一个帧单独定界的方法，每个帧有一个帧首字符串，有一个帧尾字符串。但是问题也很明显，接收方需要检测位串的组合，判断开始和结束，接收机制较复杂效率较低。为了防止理解错误，有效数据中出现的DLE是两倍DLE来表示。接收方接收数据的时候，看到DLE则开始进入检测状态，检测后续跟着的是什么，如果仍然是DLE则说明接收到的数据，写入DLE，如果是控制字符串，则根据控制信息选择后续操作。

    带填充的字符定界比较复杂，且信道利用率低，发送方需要扫描有效数据并对DLE进行加倍，接收方也需要扫描，并解析相应的DLE。同时，原始的服务数据单元SDU，认为最好不要修改SDU，而是对其进行封装，这种带填充的方式就不满足这个需求，需要对SDU进行填充。
    
    （3）带位填充的首尾标记定界法
    第三种方法和第二种方法思想完全一样，不过第二种方法针对面向字符，第三种面向比特。
    -- 帧的起始和结束都用一个特殊的位串“01111110”，称为标记（flag）
    -- “0”比特插入删除技术，在传送的数据信息中每遇到5个连续的1在其后加0
    -- 例如：0110111111011111001在网络中传送时表示为：0111111001101111101011111000101111110

    优缺点和第二种方法一样。问题也是改变了SDU的内容。为了避免这种问题，还有第四种方法。

    （4）物理层编码违例法
    只适用于物理层编码有冗余的网络，如曼彻斯特编码。

    曼彻斯特编码是高到低为0，低到高为1，冗余编码在二进制位位时间内，持续高或低，则编码是非法编码，例如标记连续两个高是J，连续两个低是K，0011JJKK可以标识帧开始。早期令牌环网使用了这种技术，因为可以方便地定界，J和K在曼彻斯特编码中是不存在的。

    注意：在很多数据链路协议中，使用字符计数法和一种其它方法的组合。

4.4 差错控制
    计算机网络中出现差错是什么样的情况？是连续差错还是离散差错？连续差错：传送位串0001101001，出现三位的错误且三位连在一起。而离散差错是三位分布在三个地方。那么网络中常见的是哪类错误？连续错！
    1、差错出现的特点：随机、连续突发（burst）
    2、差错产生的原因：
    （1）信道的电气特性引起的信号幅度、频率、相位的畸变
    （2）信号反射
    （3）串扰
    （4）闪电、大功率电机的启停等。
    3、出错情况
    （1）帧（包括发送帧和响应帧）出错
    （2）帧（包括发送帧和响应帧）丢失

    计算机网络中连续突发错误是绝大多数情况，检验连续差错是主要的。

4.4.1   差错控制的方法
    1、差错控制的目的
    保证帧正确、按序送交上层。在接收方能够判断接收的数据是否正确，若错误还可能要恢复错误。
    2、差错控制的方法
    （1）自动纠错机制
    （2）检错反馈重发机制

    首先，只有正确的帧才可以提交，其次是按序（不能多和漏）。检测一定是接收方来做，恢复是双方都有可能参与的。