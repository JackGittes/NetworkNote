计算机网络原理笔记 36
广域网技术（四）
作者：赵明心    日期：2019/04/07

6.3 拥塞控制
    与之相关的是交通拥塞问题，从问题以及控制方法上是很类似的。
    1、拥塞
        网络上有太多的包时，性能会急剧下降，这种现象称为拥塞
    2、拥塞产生的原因
        对资源需求的总和>可用资源
    3、解决办法
    （1）解决需求和能力的矛盾
    （2）"头疼医头、脚疼医脚“解决方案只能转移影响性能的瓶颈
    （3）需要全面考虑各个因素

    网络每隔两三年就会进行升级，升级是周期性的，每隔一段升级，但是通过升级的办法没有办法彻底解决拥塞的问题，对于资源的需求是一个无底洞，至少到现在为止，某些需求仍然无法很好满足。由于不可能无穷地提升硬件资源，还有一种就是抑制用户的需求，最简单的就是用户主动限制自己的需求，放弃应用需求，但是这个不太可行。所以必须借助技术手段来进行限制。实际网络中，UDP服务就有此类限制，UDP允许小流量应用，但是不允许大流量应用使用UDP服务，因为UDP的抢流量能力太强。

    面向连接服务TCP的可控性更强。

    此处略去一张图，拥塞控制的作用。网络轻度拥塞的时候，会出现一点丢包的现象，当拥塞非常严重的时候，丢包率急剧上升，递交到网络中的数据包大量丢失，在极限情况下达到死锁状态，吞吐量降低为0。

    实际的拥塞控制，网络按照自己的能力对网络流量进行控制，现实中使用的时候，达不到通信资源理想的控制，但是可以接近。

6.3.1   拥塞发现
    1、拥塞度量
        （1）缺乏缓冲区造成的丢包率上升
        （2）平均队列长度变长
        （3）超时重传的包的数目增大
        （4）平均包延迟增大
        （5）包延迟变化（Jitter）增大
    2、拥塞监视点
        （1）源节点
        （2）中间路由器

    网络中有很多度量指标，只要其中有一个发生了剧烈恶化，就算是发现拥塞，这都是对症的方式，无法从根本上解决拥塞的问题。例如增大缓冲区，从2M增大到4M，可以减少丢包，但是队列变长了，分组的平均时延会下降，相当于丢包率下降的同时，其他的指标恶化了。

    现实中，监视点基本都在中间路由器。

6.3.2   拥塞控制和流量控制的区别
    1、拥塞控制（congestion control）
        需要确保通信子网能够承载用户提交的通信量，是一个全局性问题，涉及主机、路由器等很多因素
    2、流量控制（flow control）
        与点到点的通信量有关，主要解决快速发送方与慢速接收方的问题，是局部问题，一般都是给予反馈进行控制的。

    流量控制在网络中也是经常出现的，甚至流量控制出现的范畴比拥塞控制还要多一些，拥塞控制只在网络层出现，但是流量控制可以出现在各个层次。流量控制涉及的是收发实体之间的能力不匹配，快速发送的与慢速接收的之间不能匹配，流量控制关注的是一个会话之间的收发问题，拥塞控制是全局性问题。必须是众多的发送端，发送的数据量足够大的时候才会出现拥塞。换句话说，两个节点之间无法把网络搞到拥塞状态。

    当有众多用户向网络中注入负载的时候才会导致拥塞。不过拥塞控制和流量控制都会降低发送端的数据发送速率。所有发送端都降低自己的发送速率的时候，网络整体的流量也下降了。拥塞控制也会对流量控制有所影响，因为拥塞控制的一大方法就是限制发送端速率，这样有助于流量控制，两者之间相辅相成。

6.3.3   流量控制的层次

    主机------节点--------节点-----------节点---------节点---------主机
    |---------|           |-------------|
    主机和源节点间            相邻节点的流控
    的流控    
              |---------源与目的节点之间的流控---------|
    |------------------------------------------------------------|
                           主机之间的流控

    在物理层有没有流量控制呢？没有，物理层的收发是绝对一致的，发送端单位时间发送了多少个字节，接收方肯定对应接收到了对应的脉冲數，所以在物理层是没有流量控制的。

6.3.4   拥塞控制方法
    1、根据控制论，拥塞控制方法分为两类：
        （1）开环控制
            通过好的设计来解决问题，避免拥塞发生
            拥塞控制时，不考虑网络当前状态
        （2）闭环控制
            基于反馈机制
            工作过程
                a、监控系统，发现何时何地发生拥塞
                b、把发生拥塞的消息传给能采取动作的站点
                c、调整系统操作，解决问题
    2、拥塞控制的实现位置
        （1）链路算法
        （2）源算法

    开环策略的初衷是通过良好的设计解决问题，避免拥塞的发生，但是并不能真正彻底的避免，只能是力求避免，降低拥塞发生的可能，实际拥塞的控制没有考虑当前状态是并不是真的网络很忙，在网络很空闲的时候，拥塞控制算法也在执行。就是在空闲的时候仍然对用户的发送速率进行约束，这样虽然可以减少网络的拥塞可能性，但是在空闲的时候实际上不需要实施拥塞控制。

    闭环控制是基于反馈的，反馈就是反馈网络状态，网络空闲的时候，用户可以发送大量数据，当网络很紧张的情况下，就需要限制用户的流量。真正拥塞的时候，需要定位到发生拥塞的位置才能解决拥塞。

6.3.4.1 漏桶算法
    漏桶算法属于开环控制算法中的一种。
    1、基本思想
        （1）造成拥塞的主要原因是网络流量通常是突发性的
        （2）强迫包以一种可预测的速率发送
        （3）在ATM网中广泛使用
    2、漏桶算法
        （1）将用户发出的不平滑的数据包流转变成网络中的平滑的数据包流
        （2）可用于固定包长的协议，如ATM；也可用于可变长的协议，如IP，使用字节计数
        （3）无论负载突发性如何，漏桶算法强迫输出按平均速率进行，不灵活。

    末端应用程序的数据流量还是突发的，但是边界路由器可以对数据流量进行钳制。

    此处略去了一张图，漏桶算法示意，漏桶最多按照输出口径输出。流量真正的输出速率是小于等于漏桶的下口径速率的，这个时候管道就不存在大量的突发速率流量，这个时候就算是用时间换取空间，在时间上拉长，牺牲了时间换取空间，对应于网络上是一样的，漏桶对应于数据包，数据包丢失了上层需要重新传，漏桶中的丢包和远端丢包对于上层应用来说是没有区别的。

6.3.4.2 令牌桶算法
    令牌桶算法也是一种开环控制策略。
    1、令牌桶算法
        （1）漏桶算法不够灵活，因此加入令牌机制
        （2）基本思想：漏桶存放令牌，每T秒产生一个令牌，令牌累计到超过漏桶上界时就不再增加。包传输之前必须获得一个令牌，传输之后删除该令牌

    2、漏桶算法和令牌桶算法的区别
        （1）流量整形策略不同：漏桶算法不允许空闲主机积累发送权，以便以后发送发的突发数据；令牌桶算法允许，最大为桶的大小
        （2）漏桶中存放的是数据包，桶满了就丢弃数据包；令牌桶中存放的是令牌，桶满了就丢弃令牌，不丢弃数据包。
    累计的令牌越多意味着当前节点可以突发的数据量越大。初始令牌桶为空的情况下，每个T时间发送一次数据相当于也是匀速发送的。令牌桶累计了多少数据量，就有那么多流量的突发性，应用程序快速把令牌的流量用光了，就失去了发送权，就需要等待令牌。初始为0的情况下，和漏桶的情况差不多。

6.3.4.3 抑制分组
    抑制分组是闭环控制策略的一种。
    1、每个新包到来，路由器检查输出线路是否处于警戒状态
    2、若是，则向源主机发送抑制包，包中指出发生拥塞的目的地址。同时将原包打上标记（为了以后不再产生抑制包），正常转发
    3、源主机收到抑制包之后，减少发向特定目的地的流量，并在固定时间间隔内忽略指示同意目的地的抑制包。然后开始监听，若此线路仍然拥塞，则主机在固定时间内继续减轻负载，忽略抑制包。若在监听周期内没有收到抑制包，则增加负载。
    4、流量增减策略：倍性减少，常量增加

    告警状态并不是不可以发送数据，可以理解为轻度拥塞状态，说明资源开始发生紧张。告警信息只需要传递一次就够了，所以一旦发送了抑制告警，就可以对数据包进行标记，后续路由就不需要再次告警。

    数据包减半之后的行为，真正生效有一定的时延，R1在发送抑制包之后，会受到d2\d3\d4，这些R1都会给出告警信息，如果延续到d10才会收到减半数据包，那么d2~d9是在采取抑制策略之前的数据包，这些是没有减半的，但是H1并不会受到抑制包就减半，d2~d9实际上是同一个告警信息的减半抑制，所以需要在固定时段之后再次采取策略，如果发现还是紧张才会继续减半，如果继续发生紧张，那么还会继续减少。

    当拥塞告警不再发送的时候，源端认为负载可以增加，这时候不能乘以2,而是需要常量增加。
    