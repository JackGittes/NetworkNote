计算机网络原理笔记
广域网技术（三）
作者：赵明心    日期：2019/04/06

这节讲解两个也很重要的路由算法，这两个协议在因特网的路由协议RIP协议和OSPF协议中直接采用。分别是距离向量路由算法和链路状态路由算法。

6.2.6   距离向量路由算法
    1、DVR —— Distance Vector Routing
    2、动态路由算法，也称Bellman-Ford路由算法或Ford-Fulkerson算法，最初用于ARPANET，被RIP协议采用。

    ARPANET就是Internet的前身，距离向量路由算法是互联网中使用比较广泛的一类协议，而且是动态算法。

6.2.6.1 距离向量路由算法基本思想
    1、每个路由器维护一张路由表，表中给出了到每个目的地的已知最佳距离和线路，并通过与相邻路由器交换距离信息来更新表。
    2、每隔一段时间，路由器向所有邻居节点发送它到每个目的节点的距离表，同时它也接收每个邻居节点发来的距离表。
    3、邻居节点X发来的表中，X到路由器i的距离为Xi，本路由器到X的距离为m，则路由器经过X到i的距离为Xi+m。根据不同邻居发来的信息，计算Xi+m，并取最小值，更新本路由器路由表。

    路由表中只需要保存一条最小的路径即可，取的最小值更新本路由器的路由表，有两种情况，一种是本路由器没有目标节点，这个时候就需要增加表项，还有在一种就是对之前的进行更新。

    最小值有可能存在两条路径都有等长的效果。小的替换，所以，如果后续出现了同样小的路径的时候就不进行替换。相当于后来遇到的最小值是不起作用的。距离向量路由算法是有缺陷的。

6.2.6.2 距离向量路由算法无限计算问题
    1、无限计算问题
        对好消息反应迅速，对坏消息反应迟钝
        A----B-----C----D-----E
    2、解决方法：
        （1）水平分割（split horizon）
        （2）定义一个最大值
        （3）挂起计数器（Hold-Down Timers）
        （4）触发式更新（Triggered Updates）
    
    每个路由器维护的路由表就是当前网络的拓扑状况，路由器并没有维护完整路由，只是在维护下一跳的位置，路由器的路由表并不是一个完整的拓扑信息。

    看一下距离向量路由算法的收敛性，E最终可以看到到达A的路径，但是E需要经过多久才能看到到达A需要经过D呢？首先B首先感受到A的存在，B一启动就看到了A，紧接着C看到了B，之后D看到了C，这样至少需要三次交互E才能看到到达A的路径。这样就需要三个维护周期，如果拓扑比较大，例如20个节点，那么就需要比较长的更新周期才能看到最远的两个节点的路径。这种方式说明路由算法一定有一个收敛结果。有没有可能算法收敛不下去呢？好消息是两侧相距不管多远，但是两端仍然可以感知到。好消息和坏消息具体是指什么情况呢？B和A之间原来是不相通的，后来联通了就是好消息，一开始是联通的后来不联通了就是坏消息。

    对好消息灵敏就是建立了新的连接之后可以迅速被感知到，然后收敛到算法的结果上，对于坏消息，例如AB一开始联通，后来断开了，AB距离变为无穷大，但是C到A的距离仍然是2,这个时候C需要经过B才能到达A，初始情况下，B到A断裂，B首先检测，A被直接删除或者A被置为无穷大。此时，C仍然认为需要经过2到达A，必须要B发送更新消息C才能更改自己的路由。B把自己到A是无穷大的消息传递给C之后，C就可以断开到A的路由了。

    表面上看C最终也达到了收敛状态，但是实际上一个更新周期内，B检测到自己到A是无穷大，C如果先发送路由信息，则B会认为到A能联通，因为C里面含有一个到A的路由信息存在，而B又无法获知C是怎么到达A的。距离路由算法中只能关心自己相邻的节点，所以B认为经过C可以到达A，这时候这个信息就出现了错误，这个时候如果B继续向C进行反馈，那么C就知道通过B到达A的距离增加了1,接下来继续B通过C更新自己，到达A的距离继续加1，如此反复以至于无穷大。

    标准的距离向量路由算法要注意，距离信息是周期性发送的，周期性发送在一个周期内，相邻节点谁先发谁后发是不确定的，先后不定就会导致无穷震荡的可能，如果在之前的例子中，B先发送消息给C就不会存在无穷震荡的问题。

    但是我们无法改变交换信息的顺序问题，不过仍然有几种方式来解决这个问题，例如触发式更新，B检测到坏消息的时候，正常情况下是搞不清楚谁先传的，但是在触发式更新的情况下，由于B检测到了A断开，那么B就马上把自己的信息发送到周围节点，不用等待自己的刷新周期，这样可以保证坏消息及时向周边传播。

    除了触发式更新以外，还可以使用水平分割，由于C的到A距离路由是B给的，所以B向C报告关于A的路由之后，C不可以反馈到A的信息给A。有了水平分割之后，B收到的信息就没有到达A的路由信息了。

    还有一种是定义最大值，这是比较简单的方法，定义最大值，例如最大值X，当震荡的值超过X的时候，就认为路由信息无效就可以删除了。但是定义最大值的方式还是要经过很多次更新过程，现实中的RIP协议就是才用了定义最大值的方式来避免这种情况。要注意由于有最大值的存在，网络规模的最远两个节点的距离不能大于或等于X，现实当中的RIP协议定义的最大值是16,所以RIP协议适用的网络范围不是太大。

    最后还有一个挂起计数器的方式，坏消息的路由信息不会马上生效，由于B获得信息之后不马上生效，B到A是无穷大的信息要保留两个周期，这样的话，B先受到C到A的路由信息是3,但是此时B认为C3这个信息是无效的，B仍然继续发送无穷大消息，这个时候C就可以更新自己的路由了。如果B受到两次C的消息是一样的，说明可能存在C的第二条路径到达A，这个时候B可以更新自己的路由。

6.2.7   链路状态路由算法
    1、发现邻居节点，并学习它们的网络地址
    2、测量到每个邻居节点的延迟或开销
    3、将所有学习到的内容封装成一个链路状态包
        （1）包以发送方的标识符开头，后面是序号、年龄和一个邻居节点列表
        （2）链路状态包定期创建或发生重大事件时创建
    4、将链路状态包广播发送给所有其他路由器
        洪泛方式：状态包包含一个序号，每次发送新包时加1。路由器记录信息时对（源路由器、序号），当一个链路状态包到达时，若是新的，则分发，若是重复的，则丢弃；若序号比路由器记录中的最大序号小，则认为过时而丢弃。
    5、计算到每个其他路由器的最短路径

    距离向量算法有缺陷，一个是无穷计算问题，再者是收敛时间较长，距离向量路由算法适用于小规模网络，而链路状态路由算法可以适用于大规模网络。距离向量路由算法中的每个节点都不清楚到达目的节点的完整信息，但是由于信任的特点，节点只知道周边节点的情况。

    注意链路状态交换的不是路由信息而是直接交换直接相连的节点，并广播出去。重大事件创建对应于突发事件，例如链路发生断裂，这时候就需要立刻广播。由于每个刷新周期，每个节点都广播自己的周边拓扑信息，这样每个节点一个周期就可以获得整个网络的拓扑情况，这样可以看到，链路状态路由算法收敛速度比较快。

6.2.7.1 链路状态路由算法
    1、问题
        序号占用多大空间？路由器崩溃后或序号出错怎么办？
    2、解决办法：
        （1）使用32位序号
        （2）增加年龄（age）域，每秒钟年龄减1,为0则丢弃
        （3）链路状态包到达后，延迟一段时间，并与其他已到达的来自同一路由器的链路状态包比较序号，丢弃重复包，保留新包
        （4）链路状态包需要应答
    年领域的作用是避免保留的那个源是错的，因为要保留最大序号的状态包，例如源端发送的序号是4,有可能传输的时候出现了差错，包序号变成了1000,这个时候就有问题，之后A发送的5\6\7....状态包都会被当成是旧的状态包而被丢弃，所以需要有一个年领域，来保证生命期的维护，当4发生错误跳变成1000的时候就会对1000进行消耗，消耗到头的时候，生命周期减为0。这时新包到达的时候可以及时更新。

    链路状态包要及时应答。
