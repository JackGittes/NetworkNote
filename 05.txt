计算机网络原理笔记 05 
网络体系结构（一）
作者：赵明心	日期：2019/02/11

	网络体系结构就是层、服务、协议三者的集合，给一个网络体系结构，分析它如何工作就要看它是如何分层的，每层提供什么样的服务，最后研究接口。

	实际工作中，不会沿用三步走的方法，而是选择更方便的方式：
	（1）选取模板，早期一般选择OSI/RM，或者抽象五层模型
	（2）研究模板是如何分层的，研究每层提供的服务，模板的研究结束
	（3）对于具体的实例
		a、研究实例层次与模板的对应关系，也即实例是如何分层的，实例的层与模板的层有什么关系
		b、对于具体的实例，将核心放在协议的分析上，看实例为了实现服务，制定了哪些协议以及协议的细节。
	本课程就是按照这个思路展开的。以OSI/RM为模板，以TCP/IP协议集为实例来进行研究。TCP/IP的重点在于每层实现了哪些协议，协议的具体细节。

	回到哲学家——翻译——秘书的例子，哲学家在发出信息的时候会对信息进行封装，添加一些控制信息，哲学家并不需要秘书的存在，哲学家1只提供了翻译和传递的需求，他只知道按照什么样的格式给翻译，数据可以送达哲学家2。而翻译1对哲学家的信息处理完成之后再次封装传递给秘书1。接受者一侧是一个相反的工作。
	从哲学家的角度来说，他所能看到的只是将数据给翻译而已，他并不了解翻译后续的工作，分层的时候层不能太多。层太多的话，效率低，经手人太多，其次是带宽浪费，每个人都会对数据进行封装，导致有效数据减少。

2.2	层、协议、接口
	（1）每层之间都会向上层提供服务，层与层之间通过接口来提供服务，协议是同层之间的规则。对于这样的体系结构，如果想要提供完整服务，需要让每个系统都要加载完整的协议，也即所有系统都需要具有三层的网络结构。而在网络异构的情况下，体系结构不同，这时候就需要中间的转换节点来实现网络结构之间的转换工作，而不能直接相连。

	（2）分层之后，每一层都需要使用同样的实现，同一层使用的协议必须一致。
	（3）只有最底层跟物理结构打交道，只有最高层直接跟用户打交道。

2.2.1	层次设计主题
	每一层可能需要面临的问题或需要实现的功能。

	（1）编址机制（Addressing）：需要设定全球唯一的地址以找到它。网卡地址、域名、端口号这些口可以视为是一种地址，寻址的问题不是一层能解决的。

	（2）数据传输（data transferring）：接受方是否能满足发送方的数据传输要求，准备、协调和控制等。

	（3）差错控制（error controlling）：a、需要解决差错的检测与恢复问题，每一层都要有一个基本原则就是只提供正确的信息给上一层，需要检查错误。差错的检测和恢复是分离的，因为差错的检测绝大多数情况都需要，但是差错恢复不一定是必须的。例如音视频的传输可以不进行差错的恢复，但是远程文件传输一定要进行差错恢复。b、每一层都需要进行差错的检测，并非只需要特定的层进行而其他的层不进行。首先是一个层不能保证百分百检测出错误，再者提交过程也可能出现错误。

	（4）顺序控制（sequence controlling）：保证数据顺序的正确性，同时不能少和重复

	（5）流量控制（flow controlling）：收发方处理能力不匹配的时候，需要处理流量问题。例如10M和100M的网卡进行交流的时候，100M到10M的时候，有90%的数据来不及接受，这个时候需要解决。实际情况可能更复杂。对于带宽不匹配的时候，很好解决，先握手，然后双方按照最低的速率进行工作，这个时候就可以解决速率不匹配的问题。实际情况还有其他问题，例如两个主机都是10M的，但是发送方有10个缓冲区，而接收方只有一个缓冲区，缓冲区腾空的时间是数据处理完成提交之后，在缓冲区清空之前，新数据到达也是没有用的，这个时候就会出现问题。
	根据操作系统的知识，每个任务能获得的缓冲区的大小是在变化的，发送方需要知道接收方的接受能力，才能根据接受能力发送，这个也是需要解决的。

	（6）拆分与重组（disassembling and reassembling）：用户的数据不能直接完整传输，一定会对数据进行最大长度限制，MTU（最大传输单元），不同网络的最大传输单元不同，一旦进行分段就会面临重组的问题，后面会介绍重组和拆分在哪一层进行。

	（7）复用与解复用（multiplexing & demultiplexing）：网络带宽10M，每个用户需求是1M，那么10个用户可以复用带宽

	（8）路由（routing）


2.3	实体和对等实体

	2.3.1
	实体（Entity）：（1）层中的活动元素（2）可以是软件（如进程），也可以是硬件（如网卡、智能输入/输出芯片），不同网络层次中的实体实现的功能可以相同。（3）对等实体（同等实体）：位于不同子系统的同一层的实体间的互称。

	简单说，实体就是每层完成功能的单元，每一层的功能最后都要落实到是由软件实现还是硬件实现上，例如IP协议对应的实体就是IP进程，而网卡就是硬件实体，完成第一层到第二层的数据发送。
	为什么需要强调对等实体的概念呢？因为规则（协议）就是对等实体之间遵守的规则。在垂直方向上，每个层需要跟相邻的上下层打交道，而在水平方向上就是和对等实体打交道。在每一层上，我们重点研究它如何调用下层的服务，如何给上层提供服务。
	
	2.3.2
	层（Layer）：（1）(n)层：指在网络体系结构中的某个特定层（2）（n+1）层，指n层的相邻上层（3）(n-1)层，指n层的相邻下层

	每层实体与同一系统的相邻层实体打交道，每层实体与不同系统的对等实体交互。 
	
	2.3.3
	协议(Protocol)：协议就是规则，计算机网络同等层次中，通信双方进行信息交换时必须遵循的规则。

	协议的组成：
	（1）语法（syntax）：以二进制形式表示的命令和相应的结构，数据传输格式，加哪些控制信息
	（2）语义（semantics）：由发出的命令请求，完成的动作和回送的响应组成的集合，通讯是如何进行的，如何理解和处理数据
	（3）定时关系（timing）：有关事件顺序的说明，规定数据是否需要应答等
	最终目的是保证对等实体之间能在制定规则下通信，目的是保证上层提交的数据送达对方同时保证服务质量，每层协议都是为了保证上层数据的传输。QoS(满足服务质量)

	2.3.4	连接
	(n)连接
	(n+1)实体利用(n)实体而建立的联系
	(n+1)层对等实体要进行通信必须通过相邻下层以及下面各层通信来完成。服务的本质就是满足服务要求的数据传输能力，例如可靠性、时延等等。要建立n连接，一定需要下面一层提供的n-1连接，依次递推到物理层实体。

	2.3.5	接口和服务
	在计算机网络分层结构中，每一层功能的本质都是为它的上层提供服务。
	服务(Service):（n）实体向(n+1)实体提供的相互通信能力
	服务(n+1)是实体能看见的(n)实体提供的功能集合，包括：
	（1）(n)实体自己提供的某些功能
	（2）从（n-1）层及以下各层及本地系统得到的服务
	（3）通过与对等实体通信而得到的功能
	功能与服务并非等同的，一层可能完成很多功能，上层能看到的功能才算是服务。功能经过包装，以某种形式展现给上层。



