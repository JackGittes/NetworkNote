计算机网络原理笔记 46
Internet基本原理（八）
作者：赵明心    日期：2019/04/24

7.8.10  两种连接释放方法
    两种连接释放方法
    （1）非对称式：一方释放连接，整个连接断开，存在丢失数据的危险
    （2）对称式：每个方向的连接单独关闭，双方都执行DISCONNECT才能关闭整条连接

    释放连接的三次握手协议

    发送DR启动定时器 --------------- DR到达

    A发送断连请求，B收到断连请求，并进行回应。按理说两次握手就足够断连，为什么需要三次握手？因为有可能B发回的断连确认会在网络中丢失，这时候需要增加一个保险，A再次发送确认才释放连接。但是也存在可能A第三次发回的握手也发生丢失，不过这是一个小概率的时间，在TCP协议中取三次握手来确认需要断开连接。

    （1）第三次握手的信息即便是丢失了B可以设定定时器，当定时器超时的时候，B仍然进行自动连接释放操作，这样也可以保证连接被有保障地释放掉，这比单方确认释放连接还是要增强了可靠性。
    （2）当在第二次握手的时候发生了数据丢失的情况，这个时候A也会启用定时器，发现在规定时间内没有收到B的应答，这个时候超时重新发送断连请求信息。
    （3）如果第二次握手的时候，B发回的确认信息丢失，而且A超时重发的断连请求也发生了丢失，这个时候可以在AB都设定定时器，当AB都发生超时的时候就进行连接释放。

    建立连接与释放连接的过程是类似的。都是需要三次握手来实现可靠的连接建立和释放。

7.9 用户数据报协议UDP
    User Data Protocol：用户数据协议
    为什么设计UDP？
    （1）不需要建立连接（减少延时）
    （2）无拥塞控制：UDP可按需发送
    （3）经常用于流媒体数据传输
        a、低负载
        b、速率敏感
    实时性要求比较高的时候会采用UDP协议。

    UDP报头的封装：

    传输层数据报            UDP报头       UDP数据区
    IP分组                 IP报头        IP数据区
    帧            帧头          帧的数据区

    UDP的数据报非常简单，UDP报头信息里面有端口信息，一般需要在相同的端口之间进行通信，80-80,21-21。

    UDP报头格式：
        字节       4        4         1       1        2
              源IP地址   目的IP地址     0      17      UDP长度
    
    字节       12          2         2         2          2
            伪首部       源端口    目的端口     长度       校验和
        
        UDP用户数据报          | 首部              数据   |
           IP分组  |   首部    |          数据           |
                  |<------------IP数据报-------------->|

    通常情况下是没有伪首部的。网络层需要封装IP地址，传输层封装端口号。

    UDP源端口号：指示发送方的UDP端口号
    UDP目的端口号：指示接收方的UDP端口号
    UDP报文长度：指示数据报总长度，包括报头及数据区总长度
    UDP校验和：为0表示未选校验和，全1表示校验和为0

7.10    传输控制协议TCP
    Transmission Control Protocol
    1、TCP协议
        （1）用于在各种网络上提供有序可靠的面向连接的数据传输服务
        （2）TCP数据报长度要求小于64K字节
        （3）TCP协议是面向字节流的，为每个字节分配一个序号
    大于64KB则无法传输。IP层给每个IP分组一个序号，而TCP是面向字节流。TCP的粒度更细。

    此处省略一张图，是TCP报头格式。

    1、源端口和目的端口：各16位
    2、序号和确认号：以字节为单位编号，各32位
        （1）TCP每次发送的报文段的首部中的序号字段数值表示该报文段第一个字节的序号
        （2）TCP确认号表示接收端期望下次收到的数据中的第一个数据字节的序号
        序号和确认号是为了保证数据有序到达的标识。
    3、TCP头的长度：4位，长度单位为32位字
    4、6位的保留域
    5、6位的标识位：置1表示有效
        （1）URG：和紧急指针配合使用，发送紧急数据
        （2）ACK：确认号是否有效
        （3）PSH：指示发送方和接收方将数据不做缓存，立刻发送或接受
        （4）RST：由于不可恢复的错误重置连接
        （5）SYN：用于连接建立指示
        （6）FIN：用于连接释放指示
    6、窗口大小：用于基于可变滑动窗口的流控，指示发送方从确认号开始可以再发送窗口大小的字节流
    7、校验和：为增加可靠性，对TCP头，数据和伪头计算校验和
    8、可选项域

7.10.1  TCP连接管理
    1、由于两军问题（two-army problem）的存在，可以证明不存在安全的通过N次握手实现对称式连接释放的方法
    2、但是在实际的通信过程中，使用三次握手+定时器的方法释放连接的绝大多数情况下都是成功的。
    3、连接建立过程中要解决以下三个问题：
        （1）要使每一方能够确知对方的存在
        （2）要允许双方协商一些参数（如最大报文段长度，最大窗口大小，服务质量等）
        （3）能够对运输实体资源（如缓存大小，连接表中的项目等）进行分配
    4、三次握手建立连接
        （1）服务器方执行LISTEN和ACCEPT原语，被动监听
        （2）客户方执行connect原语，产生一个SYN为1和ACK为0的TCP段，表示连接请求
        （3）服务器方检查是否有服务进程在所请求的端口上监听，若没有，回答RST置位（重新建立传输连接）的TCP字段
        （4）若有服务进程监听，发出一个SYN置1和ACK置1的TCP段表示连接确认，并请求与对方的连接
        （5）发起方收到确认后，发出一个SYN置0和ACK置1的TCP段表示给对方的连接确认
    5、单向的连接释放
        释放连接时，发出FIN置1的TCP段并启动定时器，在收到确认后关闭连接，若无确认并且超时，也关闭连接。

    当A接收到B的确认，从A到B的连接就释放了，连接处于半关闭状态，即A已经没有数据要发送了，但如果B还发送数据，A仍接受。

    也就是这个连接的释放过程是不对等的。

    此处省略了一张图，是TCP的有限状态机。

7.10.2  TCP传输策略
    1、TCP的窗口管理机制
        （1）基于确认和可变窗口大小
        （2）窗口大小为0时，正常情况下，发送方不能再发送TCP段
        （3）但是有两个例外：
            a、紧急数据可以发送
            b、为防止死锁，发送方可以发送1字节的TCP段，以便让接收方重新声明确认号和窗口大小
    2、如何改进传输层的性能？
        （1）策略1：发送方缓存应用程序的数据，等到形成一个比较大的段再发出
        （2）策略2：在没有可能进行“捎带”的情况下，接收方延迟发送确认段
        （3）策略3：使用Nagle算法
            a、当应用程序每次向传输实体发出一个字节时，传输实体发出第一个字节并缓存所有其后的字节直至收到对第一个字节的确认。b、适用于数据发送速度快，而网速较慢的情况
        （4）策略4：使用Clark算法解决傻窗口症状（silly window syndrome）
            a、傻窗口症状：当应用程序一次从传输层实体读出一个字节时，传输层实体会产生一个字节的窗口更新段，使得发送方只能发送一个字节
            b、解决办法：限制接收方只有在具备一半的空缓存或最大段长的空缓存时，才产生一个窗口更新段。
