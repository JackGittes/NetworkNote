计算机网络原理笔记 17
数据链路控制（四）
作者：赵明心    日期：2019/02/26

正向应答加超时重发的机制，对于应答的发送时机应该在什么时候？流量控制学完之后，实际应答发生在数据提交完成，缓冲区腾空之后。

流量控制这个词在网络研究当中是多义的。广义上是所有跟流量相关的控制，包括拥塞控制等，另外一种是狭义的流量控制，特指收发方收发能力不匹配，所以需要采取措施使得发送方按照接收方接受能力进行发送。有时候文献书籍会指广义的流量控制，而不是狭义的。

流量控制不是数据链路层解决就可以一劳永逸的。在不同层次控制和解决机制有差异，但是大同小异。不同层次的流量控制视角有什么不同？

OSI/RM为例

        Internet
      ————————————
      |          |
 H1---|R1      R2|---H2 
      |          | 
      ————————————

H1---H2是传输层，R1---R2是网络层。

数据链路解决的是内部两个结点之间的点到点问题，传输层解决的时候源主机到目的主机的端到端问题。网络层的重点是解决R1和R2，传输层重点是源主机和目的主机的处理能力不匹配问题，数据链路层解决的是每一跳之间的不匹配问题。从源主机到源节点，除了需要数据链路层解决，还需要网络层介入，因为这属于资源子网到通信子网的问题。

流量控制基本策略大同小异。

4.5.1   单工停等协议（理想情况）
    这是最简单的方案。这里简化研究，只研究单工信道。为了解决流量控制，需要一方等待，很明显是发送方需要等待接收方。
    1、假设
    （1）单工传输
    （2）发送方无休止工作，数据帧无间隔无停顿
    （3）接收方可以无休止工作，缓冲区无限大
    （4）发送数据速率低于接受速率
    （5）通信电路不损坏或丢失信息帧（无需差错控制，理想信道）
    2、工作过程
    （1）发送程序：取数据、构成帧、发送帧
    （2）接收程序：等待、接收帧、送数据给高层

    有两种，简单停等协议和带流量控制的停等协议。

4.5.2   单工停等协议（无错情况）
    1、增加约束条件：接收方不能保证比发送方要快，接收方不能无休止接收
    例如：缓冲区数量有限，接受速率比发送速率慢
    2、解决方法：接收方每收到一个帧，给发送方发送应答，发送方接收到应答前不发送后续帧。

    工作过程：
    （1）发送程序：取数据、成帧、发送帧、等待应答帧
    （2）接收程序：等待、接收帧、数据送高层、发送应答帧

    这时候有了应答的过程，表示数据已经到达并处理完成，发送方可发送后续数据。无错意味着不需要对数据进行编号，但是没有差错的信道是不存在的。
4.5.3   单工停等协议（有错情况）
    1、增加约束条件：信道有差错，信息帧可能损坏或丢失
    2、解决方法：
    （1）常使用“正向应答+重发机制”来解决差错控制
    （2）数据序号采用循环序号机制
    （3）应答帧的两种方式：
        a、单帧应答：应答序号为某一个正确帧的序号
        b、成批应答：应答序号为下一个期望接收的序号
    （4）通常采用附载应答方式：将数据帧携带应答信息的通信方式称为附载应答，可以把应答帧的序号加在信息帧中一并发送，以提高效率。此时需要考虑丢失的情况。此处略去一张图。

    因为有了出错，所以会有丢失的情况，有了丢失的情况就需要有定时机制来检测丢失情况是否发生。

    在单工停等协议当中，发送方一定需要等待到了应答才能后续发送。在此时，就需要对数据进行编号，这样发送方和接收方才能确定是哪个帧出现了错误，才能后续重发。在单工停等协议中，需要需要几位？实际上，1位需要就够了，因为没有收到应答的时候无法后续发送，那么发送的序列就一直是01010101... 

    思考：接收方什么时候准备接受？处理完成并提交后清空缓冲区完成时。如果发送方对数据进行了分段，例如4段，那么必须接收到4段并拼接完成之后再腾空缓冲区。考虑另外一个问题，接收方接受了数据之后发现是重复帧，那么需不需要丢弃并且应答？需要应答，因为需要让发送方知道该帧已经接收了，不需要再发送这样的数据帧。实际应答的含义是告知发送方已正确接收了哪些，期望接收哪些。

    接收方回应期望序号是很方便的。所以实际上采用的更多的是成批应答，应答的是期望序号。但是有时候为了简化描述，使用单帧应答来描述。

    再者需要注意的是，实际的通信往往是双工的。数据需要添加帧头和帧尾，在双工通信的情况下，应答信息需要附带在数据帧。这是为了防止应答帧单独组装成帧而浪费信道。但是这也是比较理想的情况，不太可能AB都有向对方发送数据的需求。那么如何解决？计时器。当接收方的计时器超时的时候，仍然没有数据需要发送给发送方，那么应答数据单独成帧并发送，如果在计时范围内有数据要发送，那么数据和应答信息组装成帧进行发送。

    此处又略去一张图，描述有噪声信道的单工停等协议。

    发送方：网络层取数（实际是上层向下推送），成帧————发送帧————应答否————超时否

    接收方：帧到达否？————重复否？——————正确否？————接受帧，送至网络层————应答帧

    这是最简单的也确实能解决流量不匹配的流量控制方案。实际网络设计的时候是不是要选择单工停等协议呢？实际中很少有使用，因为效率太低。单工停等的信道吞吐率非常低，一般不适用，对协议进行改进可以提高信道的有效传输率。无线介质中，有一种卫星通信，而卫星通信的传播时延非常大，一般情况下可以达到250~270ms，信道传输时延那么大的情况下，信道本身是否可以作为一个缓冲区呢？比如数据源源不断地发送，在各个数据单元之间存在t时间间隔。

4.5.4   连续ARQ协议
    1、工作原理
        连续停等协议，是指不需要收到应答帧就可连续发送下面的帧。
    2、出错后处理：
    （1）全部重发流水线协议
        a、当一帧出错时，需重发出错帧之后的所有帧
        b、接收方的缓冲区数量只需要一个
    （2）选择重发流水线协议
        a、当一帧出错时，只重发出错帧
        b、接收方的缓冲区足够多
    
    这里其实有一个问题，在信道无错的情况下，连续发送肯定可以正常工作，但实际信道会有错误。这时候需要解决数据恢复的问题。流水线工作的时候，一个帧发送到超时，这个时间间隔内肯定会有很多帧到达了接收方。这些帧的序号肯定无法满足期望序号，那么对于接收方该如何处理？将接收到的帧丢弃还是进行存储？存起来的好处是，处理完重发的帧时候可以马上从缓冲区取出已存储的数据进行处理，而丢弃的话会造成之后的数据全部重发。

    所以流水线协议存在两种解决策略，全部重发和选择重发。

    选择重发需要有足够缓冲区，接收方缓存后续帧，并且发送方没有收到应答信息，那么会重发没有收到应答的帧，发送完之后再从断点位置向后继续传送。这时候接收方接收到后续的时候会连续应答。但这是理想情况，还有很多问题。实际网络工作的时候很多时候无法只重发出错帧，需要发送出错帧之后的若干帧，为什么需要这样？思考。